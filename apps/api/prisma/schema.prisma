generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auth0Id      String        @unique
  email        String        @unique
  profile      UserProfile?  @relation(fields: [profileId], references: [id])
  profileId    String        @unique @db.Uuid
  articles     Article[]
  comments     Comment[]
  articleLikes ArticleLike[]
  commentLikes CommentLike[]
}

model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userName  String   @db.VarChar(255)
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  user      User?
}

model Article {
  id        String        @id @default(uuid()) @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String
  content   String
  authorId  String        @db.Uuid
  author    User          @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     ArticleLike[]
}

model Comment {
  id              String        @id @default(uuid()) @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  content         String        @db.VarChar(2000)
  authorId        String        @db.Uuid
  author          User          @relation(fields: [authorId], references: [id])
  articleId       String        @db.Uuid
  article         Article       @relation(fields: [articleId], references: [id])
  parentComment   Comment?      @relation("commentToComment", fields: [parentCommentId], references: [id])
  parentCommentId String?       @db.Uuid
  comments        Comment[]     @relation("commentToComment")
  likes           CommentLike[]
}

model ArticleLike {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  articleId String   @db.Uuid
  article   Article  @relation(fields: [articleId], references: [id])
  like      Int
}

model CommentLike {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  commentId String   @db.Uuid
  comment   Comment  @relation(fields: [commentId], references: [id])
  like      Int
}
