generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auth0Id      String        @unique
  email        String        @unique
  profile      UserProfile?  @relation(fields: [profileId], references: [id])
  profileId    String        @unique @db.Uuid
  articles     Article[]
  comments     Comment[]
  articleLikes ArticleLike[]
  commentLikes CommentLike[]
  userTag      UserTag[]
}

model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userName  String   @db.VarChar(255)
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  user      User?
}

model Article {
  id               String           @id @default(uuid()) @db.Uuid
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  title            String
  authorId         String           @db.Uuid
  author           User             @relation(fields: [authorId], references: [id])
  portraitImageUrl String           @db.VarChar(255)
  comments         Comment[]
  likes            ArticleLike[]
  articleContent   String
  articleVisit     ArticleVisit[]
  articleHistory   ArticleHistory[]
  articleTag       ArticleTag[]
}

model Comment {
  id               String          @id @default(uuid()) @db.Uuid
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  content          String          @db.VarChar(2000)
  authorId         String          @db.Uuid
  author           User            @relation(fields: [authorId], references: [id])
  articleId        String?         @db.Uuid
  article          Article?        @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parentComment    Comment?        @relation("commentToComment", fields: [parentCommentId], references: [id])
  parentCommentId  String?         @db.Uuid
  comments         Comment[]       @relation("commentToComment")
  likes            CommentLike[]
  articleHistoryId String?         @db.Uuid
  articleHistory   ArticleHistory? @relation(fields: [articleHistoryId], references: [id])
}

model ArticleLike {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  articleId String   @db.Uuid
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  like      Int
}

model CommentLike {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  commentId String   @db.Uuid
  comment   Comment  @relation(fields: [commentId], references: [id])
  like      Int
}

model ArticleVisit {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId String   @db.Uuid
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  cookie    String   @db.VarChar(255)
}

model ArticleHistory {
  id             String    @id @default(uuid()) @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  articleId      String    @db.Uuid
  article        Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleContent String
  comments       Comment[]
}

model Tag {
  id         String       @id @default(uuid()) @db.Uuid
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String       @db.VarChar(50)
  articleTag ArticleTag[]
  userTag    UserTag[]
}

model ArticleTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId String   @db.Uuid
  tagId     String   @db.Uuid
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id])
}

model UserTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  tagId     String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
}
